SimpleDateFormat : Used to format the given date to particular format. 

Convert string to date and date to string.

SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

sdf.format() : converts date to string

sdf.parse() : Converts String to date. It throws ParseException
by default. 

Exception Handling : 

try block : This block contains statements in which there is possibility of getting runtime errors, the statement(s) which are placed in this block are treated as heavy weighted statements as jvm allocates excess memory to them. 

catch block : Once exceptions raised in try block, then the control
will be forwarded to catch block, this block contains alternate
statement(s) for exceptions raised in try block, One try block contains multiple catch blocks. 

finally block : This block contains statements that needs to executed mandatorily irrespective of try and catch blocks, this block is not mandatory, but all the statement(s) which are placed in this block are executed as mandatory statement(s). 

Exception is the top most class, from which all kinds of exceptions are derived. 

printStackTrace() : Prints the entired info about error as Exception class, Line Number, Char POs, error message. 

If you want to throw exceptions based on the condition, then we need the help of throw keyword. 

Write a program to read a number, If number < 0 then throw ArithmeticException, if number = 0 then throw 
ArrayIndexOutOfBoundsException 

this keyword identifies the member variables of the class. 

this keyword identifies member variable the clas s

without this

public class Test {

	int a;
	Test(int a) {
		a = a;
	}
}

above code leads to confusion.

Then if you write as

public class Test {

	int a;
	Test(int a) {
		this.a = a;
	}
}


this.a belongs to Test class variable a.

Write a Program to perform sum of 2 numbers, but if any number < 0 then throw NegativeException, 
if any number = 0 then throw NumberZeroException.

else print the number. 



throws will be at method level, throw will be at coding level.

How to create user-defined exceptions, 

System Exceptions are inadequate in handle in all situations, to overcome this we need the help of custom exceptions, any class, that which derived from Exception can be treated as custom exception. 

class class_name extends Exception {

}

this class treated as exception class, for exception class we need to define Error message and all by ourself. 

class CustomExeception extends Exception {
   CustomException(String error) {
    super(error);
   }
}

Write a program to check a person eligible for voting or not. if not raise user defined exception as 
VotingException 

super constructor catches error from corresponding class and stores in error variables\

as you give throws new VotingExcepiton("You annot Vote")

then this error message will be stored in constructor variable

that will be send to Excetption class

as you print error message it prints from getMessage()























