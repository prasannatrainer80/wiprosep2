

Object Oriented Programming :  It is an approach that provides a way of modularizing programming, that which can be used to 
create small partition memory area for both data and objects, which are to be used as templates for creating copies of such modules
on demand. 

Object : An object is a real world entity, that which possess 3 characterstics known as 

	(I) State

	(ii) Behaviour

	(iii) Identity 

OOPS features : 
________________

(I) Encapsulation : Wrapping up of data and functions into a single unit known as encapsulation. 

(ii) Abstraction : Hiding the irrelevant details of an objects, that do not contributes to its essential. 

*** Encapsualtion focuses on showing the relevant details, where abstraction focuses on hiding the irrelevant details ***

(iii) Inheritance : Deriving a new entity from already existing entity known as inheritance, through inheritance we can reduce the		size of the program. 

(iv) Polymorphism : The ability to take more than one form known as polymorphism. 

class : A class is a template or blueprint, that which contains combination of data members
and member functions. 

Members of the class are accessable by using instance of the class.

class class_name
{
   data members;
   member functions;
}

Why Java : 
__________


1) Platform Independence : Write Once and run anywhere. 

2) Console/Windows/Web/Mobile : 

3) Packages : Contains group of related classes and interfaces, that which belongs to one common group, if you want to overcome the naming conflicts between classes then we need the help of pacakges. 


Java Features :
_______________


	(I) Simple : Java uses simple C/C++ syntaxes, as a programmer no need to take care of internal details like memory management etc... as how much memory allocated to run the program, the same amount of memory will be reallocated automatically.  

	(ii) Object Oriented : Java supports all object oriented programming features. 

	(iii) Compiled and Interpreted : Java Programs are compiled first, during compilation java code will be converted into bytecode, then .class file will be created. In Interpreatation, it reads the bytecode line by line and executes. 

	 (iv) Portable : Ability to run the program without changing the source code, java programs are programs that can run on any
		env. without changing the source code. 

	(v) Securable : Java implements various levels of security as 

		(I) Compiler Level Security

		(ii) Bytecode Level

		(iii) Class Loader Level Security 

	(vi) Distributed : By using java, we can implement all distributed and robust applications. 

JDK (Java Development Kit) : Allows you to compile the code w.r.t. Particular version and generate bytecode. 

JRE (Java Runtime Env) : It provides the env. that which allows you to run the code. 

Java Architecture : 

1) Java Program  : Java code that which stored with extension .java 

2) Java Class : Java Code after compilation its coverted into byte code, then .class file
		will be created. 

3) JVM (Java Virtual Machine) : It contains various components as

	(I) Class Loader : Used to load all classes which are required to run the program. 

		There are 2 types of class loaders known as 

			(a) Primordial Class Loader : Used to load all system classes which are required to run the program. 

			(b) Class Loader Objects : Used to load all user-defined classes which are required to run the program. 

	(ii) JIT Compiler (Just-In Time) : Used to convert bytecode into CPU specific format. 

	(iii) Execution Manager : Contains QUEUE of programs which are ready to run, where we can execute the program. 
	Before execution it needs to undergone security authentication.



4) Java API : It provides runtime env. that which allows you to run the java prog. 


Access Modifiers : 
__________________

(I) private : Allows you to access members within current class.

(ii) public : Allows you to access members in entire application.

(iii) protected : Allows you to access members within current/derived class

(iv) friendly : By default java have friendly access modifiers, allows you to access members within all classes of current package.


System.out.println() : used to display any value or message.

System.out.println("Welcome to Java...");

the mandatory function we need to use in java console application is main() You can define main() as

public static void main(String[] args) {
â€¦
}

main() method must be static as no class object supposed to call method main. 


















